package com.atman.jixin.model.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.atman.jixin.model.bean.ChatListModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LIST_MODEL".
*/
public class ChatListModelDao extends AbstractDao<ChatListModel, Long> {

    public static final String TABLENAME = "CHAT_LIST_MODEL";

    /**
     * Properties of entity ChatListModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetId = new Property(1, long.class, "targetId", false, "TARGET_ID");
        public final static Property LoginId = new Property(2, long.class, "loginId", false, "LOGIN_ID");
        public final static Property TargetType = new Property(3, int.class, "targetType", false, "TARGET_TYPE");
        public final static Property SendTime = new Property(4, long.class, "sendTime", false, "SEND_TIME");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property UnreadNum = new Property(6, int.class, "unreadNum", false, "UNREAD_NUM");
        public final static Property IdentifyStr = new Property(7, String.class, "identifyStr", false, "IDENTIFY_STR");
        public final static Property TargetName = new Property(8, String.class, "targetName", false, "TARGET_NAME");
        public final static Property TargetAvatar = new Property(9, String.class, "targetAvatar", false, "TARGET_AVATAR");
        public final static Property Type = new Property(10, int.class, "type", false, "TYPE");
    }


    public ChatListModelDao(DaoConfig config) {
        super(config);
    }
    
    public ChatListModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LIST_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TARGET_ID\" INTEGER NOT NULL ," + // 1: targetId
                "\"LOGIN_ID\" INTEGER NOT NULL ," + // 2: loginId
                "\"TARGET_TYPE\" INTEGER NOT NULL ," + // 3: targetType
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 4: sendTime
                "\"CONTENT\" TEXT," + // 5: content
                "\"UNREAD_NUM\" INTEGER NOT NULL ," + // 6: unreadNum
                "\"IDENTIFY_STR\" TEXT," + // 7: identifyStr
                "\"TARGET_NAME\" TEXT," + // 8: targetName
                "\"TARGET_AVATAR\" TEXT," + // 9: targetAvatar
                "\"TYPE\" INTEGER NOT NULL );"); // 10: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LIST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatListModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTargetId());
        stmt.bindLong(3, entity.getLoginId());
        stmt.bindLong(4, entity.getTargetType());
        stmt.bindLong(5, entity.getSendTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getUnreadNum());
 
        String identifyStr = entity.getIdentifyStr();
        if (identifyStr != null) {
            stmt.bindString(8, identifyStr);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(9, targetName);
        }
 
        String targetAvatar = entity.getTargetAvatar();
        if (targetAvatar != null) {
            stmt.bindString(10, targetAvatar);
        }
        stmt.bindLong(11, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatListModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTargetId());
        stmt.bindLong(3, entity.getLoginId());
        stmt.bindLong(4, entity.getTargetType());
        stmt.bindLong(5, entity.getSendTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getUnreadNum());
 
        String identifyStr = entity.getIdentifyStr();
        if (identifyStr != null) {
            stmt.bindString(8, identifyStr);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(9, targetName);
        }
 
        String targetAvatar = entity.getTargetAvatar();
        if (targetAvatar != null) {
            stmt.bindString(10, targetAvatar);
        }
        stmt.bindLong(11, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatListModel readEntity(Cursor cursor, int offset) {
        ChatListModel entity = new ChatListModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // targetId
            cursor.getLong(offset + 2), // loginId
            cursor.getInt(offset + 3), // targetType
            cursor.getLong(offset + 4), // sendTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.getInt(offset + 6), // unreadNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // identifyStr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // targetName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // targetAvatar
            cursor.getInt(offset + 10) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatListModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetId(cursor.getLong(offset + 1));
        entity.setLoginId(cursor.getLong(offset + 2));
        entity.setTargetType(cursor.getInt(offset + 3));
        entity.setSendTime(cursor.getLong(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnreadNum(cursor.getInt(offset + 6));
        entity.setIdentifyStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTargetName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTargetAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatListModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatListModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatListModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
