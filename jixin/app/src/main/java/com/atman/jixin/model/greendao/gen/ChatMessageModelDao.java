package com.atman.jixin.model.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.atman.jixin.model.bean.ChatMessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_MODEL".
*/
public class ChatMessageModelDao extends AbstractDao<ChatMessageModel, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_MODEL";

    /**
     * Properties of entity ChatMessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatId = new Property(1, long.class, "chatId", false, "CHAT_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property TargetType = new Property(3, int.class, "targetType", false, "TARGET_TYPE");
        public final static Property TargetId = new Property(4, long.class, "targetId", false, "TARGET_ID");
        public final static Property TargetName = new Property(5, String.class, "targetName", false, "TARGET_NAME");
        public final static Property TargetAvatar = new Property(6, String.class, "targetAvatar", false, "TARGET_AVATAR");
        public final static Property SendTime = new Property(7, long.class, "sendTime", false, "SEND_TIME");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property Audio_duration = new Property(9, int.class, "audio_duration", false, "AUDIO_DURATION");
        public final static Property Video_image_url = new Property(10, String.class, "video_image_url", false, "VIDEO_IMAGE_URL");
        public final static Property ImageT_icon = new Property(11, String.class, "imageT_icon", false, "IMAGE_T_ICON");
        public final static Property ImageT_title = new Property(12, String.class, "imageT_title", false, "IMAGE_T_TITLE");
        public final static Property ImageT_back = new Property(13, String.class, "imageT_back", false, "IMAGE_T_BACK");
        public final static Property IdentifyStr = new Property(14, String.class, "identifyStr", false, "IDENTIFY_STR");
        public final static Property ActionType = new Property(15, int.class, "actionType", false, "ACTION_TYPE");
        public final static Property OperaterId = new Property(16, long.class, "operaterId", false, "OPERATER_ID");
        public final static Property OperaterName = new Property(17, String.class, "operaterName", false, "OPERATER_NAME");
        public final static Property OperaterType = new Property(18, int.class, "operaterType", false, "OPERATER_TYPE");
        public final static Property SelfSend = new Property(19, boolean.class, "selfSend", false, "SELF_SEND");
        public final static Property Readed = new Property(20, int.class, "readed", false, "READED");
        public final static Property SendStatus = new Property(21, int.class, "sendStatus", false, "SEND_STATUS");
    }


    public ChatMessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_ID\" INTEGER NOT NULL ," + // 1: chatId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TARGET_TYPE\" INTEGER NOT NULL ," + // 3: targetType
                "\"TARGET_ID\" INTEGER NOT NULL ," + // 4: targetId
                "\"TARGET_NAME\" TEXT," + // 5: targetName
                "\"TARGET_AVATAR\" TEXT," + // 6: targetAvatar
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 7: sendTime
                "\"CONTENT\" TEXT," + // 8: content
                "\"AUDIO_DURATION\" INTEGER NOT NULL ," + // 9: audio_duration
                "\"VIDEO_IMAGE_URL\" TEXT," + // 10: video_image_url
                "\"IMAGE_T_ICON\" TEXT," + // 11: imageT_icon
                "\"IMAGE_T_TITLE\" TEXT," + // 12: imageT_title
                "\"IMAGE_T_BACK\" TEXT," + // 13: imageT_back
                "\"IDENTIFY_STR\" TEXT," + // 14: identifyStr
                "\"ACTION_TYPE\" INTEGER NOT NULL ," + // 15: actionType
                "\"OPERATER_ID\" INTEGER NOT NULL ," + // 16: operaterId
                "\"OPERATER_NAME\" TEXT," + // 17: operaterName
                "\"OPERATER_TYPE\" INTEGER NOT NULL ," + // 18: operaterType
                "\"SELF_SEND\" INTEGER NOT NULL ," + // 19: selfSend
                "\"READED\" INTEGER NOT NULL ," + // 20: readed
                "\"SEND_STATUS\" INTEGER NOT NULL );"); // 21: sendStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChatId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTargetType());
        stmt.bindLong(5, entity.getTargetId());
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(6, targetName);
        }
 
        String targetAvatar = entity.getTargetAvatar();
        if (targetAvatar != null) {
            stmt.bindString(7, targetAvatar);
        }
        stmt.bindLong(8, entity.getSendTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getAudio_duration());
 
        String video_image_url = entity.getVideo_image_url();
        if (video_image_url != null) {
            stmt.bindString(11, video_image_url);
        }
 
        String imageT_icon = entity.getImageT_icon();
        if (imageT_icon != null) {
            stmt.bindString(12, imageT_icon);
        }
 
        String imageT_title = entity.getImageT_title();
        if (imageT_title != null) {
            stmt.bindString(13, imageT_title);
        }
 
        String imageT_back = entity.getImageT_back();
        if (imageT_back != null) {
            stmt.bindString(14, imageT_back);
        }
 
        String identifyStr = entity.getIdentifyStr();
        if (identifyStr != null) {
            stmt.bindString(15, identifyStr);
        }
        stmt.bindLong(16, entity.getActionType());
        stmt.bindLong(17, entity.getOperaterId());
 
        String operaterName = entity.getOperaterName();
        if (operaterName != null) {
            stmt.bindString(18, operaterName);
        }
        stmt.bindLong(19, entity.getOperaterType());
        stmt.bindLong(20, entity.getSelfSend() ? 1L: 0L);
        stmt.bindLong(21, entity.getReaded());
        stmt.bindLong(22, entity.getSendStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChatId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTargetType());
        stmt.bindLong(5, entity.getTargetId());
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(6, targetName);
        }
 
        String targetAvatar = entity.getTargetAvatar();
        if (targetAvatar != null) {
            stmt.bindString(7, targetAvatar);
        }
        stmt.bindLong(8, entity.getSendTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getAudio_duration());
 
        String video_image_url = entity.getVideo_image_url();
        if (video_image_url != null) {
            stmt.bindString(11, video_image_url);
        }
 
        String imageT_icon = entity.getImageT_icon();
        if (imageT_icon != null) {
            stmt.bindString(12, imageT_icon);
        }
 
        String imageT_title = entity.getImageT_title();
        if (imageT_title != null) {
            stmt.bindString(13, imageT_title);
        }
 
        String imageT_back = entity.getImageT_back();
        if (imageT_back != null) {
            stmt.bindString(14, imageT_back);
        }
 
        String identifyStr = entity.getIdentifyStr();
        if (identifyStr != null) {
            stmt.bindString(15, identifyStr);
        }
        stmt.bindLong(16, entity.getActionType());
        stmt.bindLong(17, entity.getOperaterId());
 
        String operaterName = entity.getOperaterName();
        if (operaterName != null) {
            stmt.bindString(18, operaterName);
        }
        stmt.bindLong(19, entity.getOperaterType());
        stmt.bindLong(20, entity.getSelfSend() ? 1L: 0L);
        stmt.bindLong(21, entity.getReaded());
        stmt.bindLong(22, entity.getSendStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageModel readEntity(Cursor cursor, int offset) {
        ChatMessageModel entity = new ChatMessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // chatId
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // targetType
            cursor.getLong(offset + 4), // targetId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // targetName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // targetAvatar
            cursor.getLong(offset + 7), // sendTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.getInt(offset + 9), // audio_duration
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // video_image_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // imageT_icon
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imageT_title
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // imageT_back
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // identifyStr
            cursor.getInt(offset + 15), // actionType
            cursor.getLong(offset + 16), // operaterId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // operaterName
            cursor.getInt(offset + 18), // operaterType
            cursor.getShort(offset + 19) != 0, // selfSend
            cursor.getInt(offset + 20), // readed
            cursor.getInt(offset + 21) // sendStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatId(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTargetType(cursor.getInt(offset + 3));
        entity.setTargetId(cursor.getLong(offset + 4));
        entity.setTargetName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTargetAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSendTime(cursor.getLong(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAudio_duration(cursor.getInt(offset + 9));
        entity.setVideo_image_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImageT_icon(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImageT_title(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImageT_back(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIdentifyStr(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setActionType(cursor.getInt(offset + 15));
        entity.setOperaterId(cursor.getLong(offset + 16));
        entity.setOperaterName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOperaterType(cursor.getInt(offset + 18));
        entity.setSelfSend(cursor.getShort(offset + 19) != 0);
        entity.setReaded(cursor.getInt(offset + 20));
        entity.setSendStatus(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
